%% LEX  
%literals = "'+','-','/','*','=','(',')'" ## a single char
%ignore = " \t\n"
%tokens = [ 'VAR','NUMBER' ]


## a express√£o regular tem de ser r'expreg'

r'[a-zA-Z_][a-zA-Z0-9_]*'      return('VAR', t.value)
r'\d+(\.\d+)?'                 return('NUMBER', float(t.value))
r'.'                           error(f"Illegal character '{t.value[0]}', [{t.lexer.lineno}]",t.lexer.skip(1))

%% YACC

%precedence = [
('left','+','-'),
('left','*','/'),
('right','UMINUS'),
]


## symboltable : dictionary of variables
&ts = { }

stat : VAR '=' exp { ts[p[1]] = p[3] }
stat : exp { print(p[1]) }
exp : exp '+' exp { p[0] = p[1] + p[3] }
exp : exp '-' exp { p[0] = p[1] - p[3] }
exp : exp '*' exp { p[0] = p[1] * p[3] }
exp : exp '/' exp { p[0] = p[1] / p[3] }
exp : '-' exp     { p[0] = -p[2] }
exp : '(' exp ')' { p[0] = p[2] }
exp : NUMBER      { p[0] = p[1] }
exp : VAR         { p[0] = getval(p[1]) }


$$

def p_error(t):
    print(f"Syntax error at '{t.value}', [{t.lexer.lineno}]")
    
def getval(n):
    if n not in ts: print(f"Undefined name '{n}'")
    return ts.get(n,0)

lexer = lex.lex()

y=yacc.yacc()
y.parse("3+4*7")

/$$