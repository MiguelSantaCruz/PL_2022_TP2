%% LEX
%literals = "+-/*=()" ## a single char
%ignore = " \t\n"
%tokens = [ ’VAR’,’NUMBER’ ]

## a expressão regular tem de ser r'expreg'

r'[a-zA-Z_][a-zA-Z0-9_]*'      return(’VAR’, t.value)
r'\d+(\.\d+)?'                 return(’NUMBER’, float(t.value)
r'.'                           error(f"Illegal character ’{t.value[0]}’, [{t.lexer.lineno}]",t.lexer.skip(1) )

%% YACC

%precedence = [
(’left’,’+’,’-’),
(’left’,’*’,’/’),
(’right’,’UMINUS’),
]


# symboltable : dictionary of variables
ts = { }

stat : VAR ’=’ exp { ts[t[1]] = t[3] }
stat : exp { print(t[1]) }
exp : exp ’+’ exp { t[0] = t[1] + t[3] }
exp : exp ’-’ exp { t[0] = t[1] - t[3] }
exp : exp ’*’ exp { t[0] = t[1] * t[3] }
exp : exp ’/’ exp { t[0] = t[1] / t[3] }
exp : ’-’ exp     { t[0] = -t[2] }
exp : ’(’ exp ’)’ { t[0] = t[2] }
exp : NUMBER      { t[0] = t[1] }
exp : VAR         { t[0] = getval(t[1]) }

$$

def p_error(t):
    print(f"Syntax error at ’{t.value}’, [{t.lexer.lineno}]")

def getval(n):
    if n not in ts: print(f"Undefined name ’{n}’")
    return ts.get(n,0)

y=yacc()
y.parse("3+4*7")

/$$